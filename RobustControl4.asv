clear; clc;
%% multivariable mixed-sensitivity
% load data
load('Assignment_Data_SC42145.mat');

% state space: A, B, C, D
% system: FWT
% wind data: Wind_Data (timeseries)

%% Generalized plant
G = FWT(:,1:end-1);
Gd = FWT(:,end);

% create performance weights:
s = tf('s');

% Wp:
Wp11 = (0.5556*s + 2.0897)/(s + 2.0897e-04);
Wp = [Wp11, 0; 0, 0.2];

% Wu:
Wu22 = (5*10^(-3)*s^2 + 7*10^(-4)*s + 5*10^-5) / ...
       (s^2 + 14*10^(-4)*s +10^(-5));
Wu = [0.01, 0; 0, Wu22];

% Wi
Wid = ((1/16)*pi*s + 0.3)/((1/64)*pi*s + 1);
Wi = [Wid, 0; 0, Wid];

% Wo
Wod = (0.05*s + 0.2)/(0.01*s + 1);
Wo = [Wod, 0; 0, Wod];

% generalized plant
systemnames = 'G Gd Wp Wu Wi Wo';
inputvar = '[ud(2); kd(2); V(2); r(2); u(2)]';
input_to_G = '[ud + u]';
input_to_Gd = '[V(1)]';
input_to_Wp = '[G(1)+Gd(1)-r(1); G(2)+Gd(2)]';
input_to_Wu = '[u]';
input_to_Wi = '[u]';
input_to_Wo = '[G]'; % '[G + Gd]';
outputvar = '[Wi; Wo; Wp; Wu; -G(1)-Gd(1)+r(1)-kd(1); -G(2)-Gd(2)-kd(2)]'; % Output generalized plant
sysoutname = 'P';
sysic;

% mixed sensitivity controller (from A1)
systemnames = 'G Gd Wp Wu';
inputvar = '[V; r; u(2)]';
input_to_G = '[u]';
input_to_Gd = '[V]';
input_to_Wp = '[G(1)+Gd(1)-r; G(2)+Gd(2)]';
input_to_Wu = '[u]';
outputvar = '[Wp; Wu; -G(1)-Gd(1)+r; -G(2)-Gd(2)]'; % Output generalized plant
sysoutname = 'Pn';
sysic;

[Kn,CLn,GAMn,INFOn] = hinfsyn(Pn,2,2); % Hinf design


%% Question 5)
L = G*Kn;
S = inv(eye(size(L,1)) + L);
T = S*L;


N = lft(P,Kn);
p = pole(N);
z = tzero(N);

% P11 = P(1:8,1:8);
% P12 = P(1:8,9:end);
% P21 = P(9:end,1:8);
% P22 = P(9:end,9:end);
% 
% N = P11 + P12*Kn*inv(eye(2) - P22*Kn)*P21

M = N(1:4,1:4);
p = pole(M);

% Blockify incertainty
H = ultidyn('H',[1,1], "Bound", 1 );
H = [H, 0; 0, H];

delta = [Wi*H, zeros(2); zeros(2), Wo*H];

% generalized Nyquist
n = 100;
sample = 10;

f = logspace(-4,4,n); % frequency space
w = 2*pi*1i*f; % frequency omega j (rad/s)
S = zeros(4, n*sample); % L is 2x2 MIMO
Md = usample(M*delta, sample);

ec = 0;

for i=1:sample
    for k=1:n
        Lk = det(eye(4) - evalfr(Md(:,:,i,1),w(k)));
        if Lk == 0
            ec = ec + 1;
        end

        S(:,k) = Lk;
    end
    % plot(real(S(2,:)), imag(S(2,:)), 'b')
    % plot(real(S(2,:)), -imag(S(2,:)), 'g')
end

figure(1)
plot(0,0,'x')
hold on
plot(real(S(2,:)), imag(S(2,:)), 'b')
plot(real(S(2,:)), -imag(S(2,:)), 'g')
hold off
axis equal
grid on
title('Generalized Nyquist plot')
xlabel('Re')
ylabel('Im')

% NS, N is internally stable
% NP, 

%% next 5)

N = lft(P,Kn);
N22 = N(4:8,4:8);
N22inf = norm(N22, Inf);

% not NP

n = 100;
omega = logspace(-4,4,n); % frequency space
Nf = frd(N, omega);

% for NS

Nnp = Nf(1:4,1:4);
blk = [1 1; 1 1; 1 1; 1 1];
[mubnds,muinfo] = mussv(Nnp, blk, 'c');
[VDelta, VSigma, VLMI] = mussvextract(muinfo);

% for RP

mRP = mubnds(:,1) : [MuRPinf, muRPw} = norm()







